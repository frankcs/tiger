let /* The eight queens solver from Appel */
	var N := 8
	type intArray = array of int
	var row := intArray [ N ] of 0
	var col := intArray [ N ] of 0
	var diag1 := intArray [ N+N-1 ] of 0
	var diag2 := intArray [ N+N-1 ] of 0
	function printboard() =
		(for i := 0 to N-1 do (for j := 0 to N-1 do print(if col[i]=j then " O" else " .");
		print("\n"));
		print("\n"))
function try(c:int) =
if c=N then printboard()
else for r := 0 to N-1
do if row[r]=0 &
diag1[r+c]=0 & diag2[r+7-c]=0
then (row[r] := 1; diag1[r+c] := 1;
diag2[r+7-c] := 1; col[c] := r;
try(c+1);
row[r] := 0; diag1[r+c] := 0;
diag2[r+7-c] := 0)
in try(0) end




/*let
	type linked_list = { node : int, next : linked_list }
	var list := linked_list { node = -1, next = nil }
	var head := list
	var it : linked_list := nil
	var n:= 0
	
	function read_int() : int =
		let 
			var i := 0
			var buffer := getline()
			
			function is_digit(s : string) : int = 
				ord(buffer)>=ord("0") & ord(buffer)<=ord("9")
			
			function skipto() =
				while buffer=" " | buffer="\n" | buffer=""
				do buffer := getline()
		in 
				skipto();
				while is_digit(buffer)
				do (
					i := i*10+ord(buffer)-ord("0"); 
					buffer := getline()
				);
				i
		end
	
in
	n:= read_int();
	while n <> 16 do
	(
		list.next:= linked_list { node = n, next = nil };
		list:= list.next;
		n:= read_int()
	);
	it:= head.next;
	while it <> nil do
	(
		printi(it.node);
		print("\n");
		it:= it.next
	)
end
*/

/*let
	type Person  = {Age: int, Name:string, Mother:Person}
	type PersonArray = array of Person	
	var a := Person {Age =22, Name="Mima", Mother= nil}	
	var b := Person {Age =22, Name="Zunilda", Mother= a}	
	var c := Person {Age =22, Name="Frank", Mother=b}	
	var d := Person {Age =22, Name="Alex", Mother=nil}
	var	e := PersonArray [5] of Person {Age =22, Name="Mima", Mother= nil}			
in
	printline(e[1].Name);
	e[1].Name:="Cheo";
	e[2].Name:="Calabacn";
	printline(e[1].Name);
	printline(e[2].Name)
end
*/




//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g 2012-12-07 12:31:15

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class TigerLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int ALIAS_DECL=4;
	public const int AND=5;
	public const int ARRAY_CREATION=6;
	public const int ARRAY_TYPE_DECL=7;
	public const int ASCII_ESC=8;
	public const int ASSIGN=9;
	public const int AT=10;
	public const int BREAK=11;
	public const int COMMENT=12;
	public const int DIV=13;
	public const int EQUAL=14;
	public const int ESC_SEQ=15;
	public const int EXPRESSION_LIST=16;
	public const int EXPRESSION_SEQ=17;
	public const int FOR=18;
	public const int FUNCTION_CALL=19;
	public const int FUNCTION_DECL=20;
	public const int GT=21;
	public const int GT_EQUAL=22;
	public const int ID=23;
	public const int IF_THEN=24;
	public const int IF_THEN_ELSE=25;
	public const int INT=26;
	public const int LET=27;
	public const int LT=28;
	public const int LT_EQUAL=29;
	public const int MINUS=30;
	public const int MUL=31;
	public const int NIL=32;
	public const int NON_EQUAL=33;
	public const int OR=34;
	public const int PLUS=35;
	public const int PRINTABLE_CHARACTER=36;
	public const int PROGRAM=37;
	public const int RECORD_CREATION=38;
	public const int RECORD_DECL=39;
	public const int STRING=40;
	public const int TYPE_DECL=41;
	public const int TYPE_ID=42;
	public const int UMINUS=43;
	public const int VAR_DECL=44;
	public const int WHILE=45;
	public const int WS=46;

    // delegates
    // delegators

	public TigerLexer()
	{
		OnCreated();
	}

	public TigerLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public TigerLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 1);
		TraceIn("AND", 1);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:7:5: ( '&' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:7:7: '&'
			{
			DebugLocation(7, 7);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 1);
			LeaveRule("AND", 1);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 2);
		TraceIn("ASSIGN", 2);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:8:8: ( ':=' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:8:10: ':='
			{
			DebugLocation(8, 10);
			Match(":="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 2);
			LeaveRule("ASSIGN", 2);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_BREAK();
	partial void LeaveRule_BREAK();

	// $ANTLR start "BREAK"
	[GrammarRule("BREAK")]
	private void mBREAK()
	{
		EnterRule_BREAK();
		EnterRule("BREAK", 3);
		TraceIn("BREAK", 3);
		try
		{
			int _type = BREAK;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:9:7: ( 'break' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:9:9: 'break'
			{
			DebugLocation(9, 9);
			Match("break"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BREAK", 3);
			LeaveRule("BREAK", 3);
			LeaveRule_BREAK();
		}
	}
	// $ANTLR end "BREAK"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 4);
		TraceIn("DIV", 4);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:10:5: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:10:7: '/'
			{
			DebugLocation(10, 7);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 4);
			LeaveRule("DIV", 4);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 5);
		TraceIn("EQUAL", 5);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:11:7: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:11:9: '='
			{
			DebugLocation(11, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 5);
			LeaveRule("EQUAL", 5);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_FOR();
	partial void LeaveRule_FOR();

	// $ANTLR start "FOR"
	[GrammarRule("FOR")]
	private void mFOR()
	{
		EnterRule_FOR();
		EnterRule("FOR", 6);
		TraceIn("FOR", 6);
		try
		{
			int _type = FOR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:12:5: ( 'for' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:12:7: 'for'
			{
			DebugLocation(12, 7);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FOR", 6);
			LeaveRule("FOR", 6);
			LeaveRule_FOR();
		}
	}
	// $ANTLR end "FOR"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 7);
		TraceIn("GT", 7);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:13:4: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:13:6: '>'
			{
			DebugLocation(13, 6);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 7);
			LeaveRule("GT", 7);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_GT_EQUAL();
	partial void LeaveRule_GT_EQUAL();

	// $ANTLR start "GT_EQUAL"
	[GrammarRule("GT_EQUAL")]
	private void mGT_EQUAL()
	{
		EnterRule_GT_EQUAL();
		EnterRule("GT_EQUAL", 8);
		TraceIn("GT_EQUAL", 8);
		try
		{
			int _type = GT_EQUAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:14:10: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:14:12: '>='
			{
			DebugLocation(14, 12);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT_EQUAL", 8);
			LeaveRule("GT_EQUAL", 8);
			LeaveRule_GT_EQUAL();
		}
	}
	// $ANTLR end "GT_EQUAL"

	partial void EnterRule_LET();
	partial void LeaveRule_LET();

	// $ANTLR start "LET"
	[GrammarRule("LET")]
	private void mLET()
	{
		EnterRule_LET();
		EnterRule("LET", 9);
		TraceIn("LET", 9);
		try
		{
			int _type = LET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:15:5: ( 'let' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:15:7: 'let'
			{
			DebugLocation(15, 7);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LET", 9);
			LeaveRule("LET", 9);
			LeaveRule_LET();
		}
	}
	// $ANTLR end "LET"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 10);
		TraceIn("LT", 10);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:16:4: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:16:6: '<'
			{
			DebugLocation(16, 6);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 10);
			LeaveRule("LT", 10);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_LT_EQUAL();
	partial void LeaveRule_LT_EQUAL();

	// $ANTLR start "LT_EQUAL"
	[GrammarRule("LT_EQUAL")]
	private void mLT_EQUAL()
	{
		EnterRule_LT_EQUAL();
		EnterRule("LT_EQUAL", 11);
		TraceIn("LT_EQUAL", 11);
		try
		{
			int _type = LT_EQUAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:17:10: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:17:12: '<='
			{
			DebugLocation(17, 12);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT_EQUAL", 11);
			LeaveRule("LT_EQUAL", 11);
			LeaveRule_LT_EQUAL();
		}
	}
	// $ANTLR end "LT_EQUAL"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 12);
		TraceIn("MINUS", 12);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:18:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:18:9: '-'
			{
			DebugLocation(18, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 12);
			LeaveRule("MINUS", 12);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MUL();
	partial void LeaveRule_MUL();

	// $ANTLR start "MUL"
	[GrammarRule("MUL")]
	private void mMUL()
	{
		EnterRule_MUL();
		EnterRule("MUL", 13);
		TraceIn("MUL", 13);
		try
		{
			int _type = MUL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:19:5: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:19:7: '*'
			{
			DebugLocation(19, 7);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MUL", 13);
			LeaveRule("MUL", 13);
			LeaveRule_MUL();
		}
	}
	// $ANTLR end "MUL"

	partial void EnterRule_NIL();
	partial void LeaveRule_NIL();

	// $ANTLR start "NIL"
	[GrammarRule("NIL")]
	private void mNIL()
	{
		EnterRule_NIL();
		EnterRule("NIL", 14);
		TraceIn("NIL", 14);
		try
		{
			int _type = NIL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:20:5: ( 'nil' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:20:7: 'nil'
			{
			DebugLocation(20, 7);
			Match("nil"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NIL", 14);
			LeaveRule("NIL", 14);
			LeaveRule_NIL();
		}
	}
	// $ANTLR end "NIL"

	partial void EnterRule_NON_EQUAL();
	partial void LeaveRule_NON_EQUAL();

	// $ANTLR start "NON_EQUAL"
	[GrammarRule("NON_EQUAL")]
	private void mNON_EQUAL()
	{
		EnterRule_NON_EQUAL();
		EnterRule("NON_EQUAL", 15);
		TraceIn("NON_EQUAL", 15);
		try
		{
			int _type = NON_EQUAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:21:11: ( '<>' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:21:13: '<>'
			{
			DebugLocation(21, 13);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NON_EQUAL", 15);
			LeaveRule("NON_EQUAL", 15);
			LeaveRule_NON_EQUAL();
		}
	}
	// $ANTLR end "NON_EQUAL"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 16);
		TraceIn("OR", 16);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:22:4: ( '|' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:22:6: '|'
			{
			DebugLocation(22, 6);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 16);
			LeaveRule("OR", 16);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 17);
		TraceIn("PLUS", 17);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:23:6: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:23:8: '+'
			{
			DebugLocation(23, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 17);
			LeaveRule("PLUS", 17);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 18);
		TraceIn("WHILE", 18);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:24:7: ( 'while' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:24:9: 'while'
			{
			DebugLocation(24, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 18);
			LeaveRule("WHILE", 18);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 19);
		TraceIn("T__47", 19);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:25:7: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:25:9: '('
			{
			DebugLocation(25, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 19);
			LeaveRule("T__47", 19);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_T__48();
	partial void LeaveRule_T__48();

	// $ANTLR start "T__48"
	[GrammarRule("T__48")]
	private void mT__48()
	{
		EnterRule_T__48();
		EnterRule("T__48", 20);
		TraceIn("T__48", 20);
		try
		{
			int _type = T__48;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:26:7: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:26:9: ')'
			{
			DebugLocation(26, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__48", 20);
			LeaveRule("T__48", 20);
			LeaveRule_T__48();
		}
	}
	// $ANTLR end "T__48"

	partial void EnterRule_T__49();
	partial void LeaveRule_T__49();

	// $ANTLR start "T__49"
	[GrammarRule("T__49")]
	private void mT__49()
	{
		EnterRule_T__49();
		EnterRule("T__49", 21);
		TraceIn("T__49", 21);
		try
		{
			int _type = T__49;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:27:7: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:27:9: ','
			{
			DebugLocation(27, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__49", 21);
			LeaveRule("T__49", 21);
			LeaveRule_T__49();
		}
	}
	// $ANTLR end "T__49"

	partial void EnterRule_T__50();
	partial void LeaveRule_T__50();

	// $ANTLR start "T__50"
	[GrammarRule("T__50")]
	private void mT__50()
	{
		EnterRule_T__50();
		EnterRule("T__50", 22);
		TraceIn("T__50", 22);
		try
		{
			int _type = T__50;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:28:7: ( '.' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:28:9: '.'
			{
			DebugLocation(28, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__50", 22);
			LeaveRule("T__50", 22);
			LeaveRule_T__50();
		}
	}
	// $ANTLR end "T__50"

	partial void EnterRule_T__51();
	partial void LeaveRule_T__51();

	// $ANTLR start "T__51"
	[GrammarRule("T__51")]
	private void mT__51()
	{
		EnterRule_T__51();
		EnterRule("T__51", 23);
		TraceIn("T__51", 23);
		try
		{
			int _type = T__51;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:29:7: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:29:9: ':'
			{
			DebugLocation(29, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__51", 23);
			LeaveRule("T__51", 23);
			LeaveRule_T__51();
		}
	}
	// $ANTLR end "T__51"

	partial void EnterRule_T__52();
	partial void LeaveRule_T__52();

	// $ANTLR start "T__52"
	[GrammarRule("T__52")]
	private void mT__52()
	{
		EnterRule_T__52();
		EnterRule("T__52", 24);
		TraceIn("T__52", 24);
		try
		{
			int _type = T__52;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:30:7: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:30:9: ';'
			{
			DebugLocation(30, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__52", 24);
			LeaveRule("T__52", 24);
			LeaveRule_T__52();
		}
	}
	// $ANTLR end "T__52"

	partial void EnterRule_T__53();
	partial void LeaveRule_T__53();

	// $ANTLR start "T__53"
	[GrammarRule("T__53")]
	private void mT__53()
	{
		EnterRule_T__53();
		EnterRule("T__53", 25);
		TraceIn("T__53", 25);
		try
		{
			int _type = T__53;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:31:7: ( '[' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:31:9: '['
			{
			DebugLocation(31, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__53", 25);
			LeaveRule("T__53", 25);
			LeaveRule_T__53();
		}
	}
	// $ANTLR end "T__53"

	partial void EnterRule_T__54();
	partial void LeaveRule_T__54();

	// $ANTLR start "T__54"
	[GrammarRule("T__54")]
	private void mT__54()
	{
		EnterRule_T__54();
		EnterRule("T__54", 26);
		TraceIn("T__54", 26);
		try
		{
			int _type = T__54;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:32:7: ( ']' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:32:9: ']'
			{
			DebugLocation(32, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__54", 26);
			LeaveRule("T__54", 26);
			LeaveRule_T__54();
		}
	}
	// $ANTLR end "T__54"

	partial void EnterRule_T__55();
	partial void LeaveRule_T__55();

	// $ANTLR start "T__55"
	[GrammarRule("T__55")]
	private void mT__55()
	{
		EnterRule_T__55();
		EnterRule("T__55", 27);
		TraceIn("T__55", 27);
		try
		{
			int _type = T__55;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:33:7: ( 'array' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:33:9: 'array'
			{
			DebugLocation(33, 9);
			Match("array"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__55", 27);
			LeaveRule("T__55", 27);
			LeaveRule_T__55();
		}
	}
	// $ANTLR end "T__55"

	partial void EnterRule_T__56();
	partial void LeaveRule_T__56();

	// $ANTLR start "T__56"
	[GrammarRule("T__56")]
	private void mT__56()
	{
		EnterRule_T__56();
		EnterRule("T__56", 28);
		TraceIn("T__56", 28);
		try
		{
			int _type = T__56;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:34:7: ( 'do' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:34:9: 'do'
			{
			DebugLocation(34, 9);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__56", 28);
			LeaveRule("T__56", 28);
			LeaveRule_T__56();
		}
	}
	// $ANTLR end "T__56"

	partial void EnterRule_T__57();
	partial void LeaveRule_T__57();

	// $ANTLR start "T__57"
	[GrammarRule("T__57")]
	private void mT__57()
	{
		EnterRule_T__57();
		EnterRule("T__57", 29);
		TraceIn("T__57", 29);
		try
		{
			int _type = T__57;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:35:7: ( 'else' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:35:9: 'else'
			{
			DebugLocation(35, 9);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__57", 29);
			LeaveRule("T__57", 29);
			LeaveRule_T__57();
		}
	}
	// $ANTLR end "T__57"

	partial void EnterRule_T__58();
	partial void LeaveRule_T__58();

	// $ANTLR start "T__58"
	[GrammarRule("T__58")]
	private void mT__58()
	{
		EnterRule_T__58();
		EnterRule("T__58", 30);
		TraceIn("T__58", 30);
		try
		{
			int _type = T__58;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:36:7: ( 'end' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:36:9: 'end'
			{
			DebugLocation(36, 9);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__58", 30);
			LeaveRule("T__58", 30);
			LeaveRule_T__58();
		}
	}
	// $ANTLR end "T__58"

	partial void EnterRule_T__59();
	partial void LeaveRule_T__59();

	// $ANTLR start "T__59"
	[GrammarRule("T__59")]
	private void mT__59()
	{
		EnterRule_T__59();
		EnterRule("T__59", 31);
		TraceIn("T__59", 31);
		try
		{
			int _type = T__59;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:37:7: ( 'function' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:37:9: 'function'
			{
			DebugLocation(37, 9);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__59", 31);
			LeaveRule("T__59", 31);
			LeaveRule_T__59();
		}
	}
	// $ANTLR end "T__59"

	partial void EnterRule_T__60();
	partial void LeaveRule_T__60();

	// $ANTLR start "T__60"
	[GrammarRule("T__60")]
	private void mT__60()
	{
		EnterRule_T__60();
		EnterRule("T__60", 32);
		TraceIn("T__60", 32);
		try
		{
			int _type = T__60;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:38:7: ( 'if' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:38:9: 'if'
			{
			DebugLocation(38, 9);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__60", 32);
			LeaveRule("T__60", 32);
			LeaveRule_T__60();
		}
	}
	// $ANTLR end "T__60"

	partial void EnterRule_T__61();
	partial void LeaveRule_T__61();

	// $ANTLR start "T__61"
	[GrammarRule("T__61")]
	private void mT__61()
	{
		EnterRule_T__61();
		EnterRule("T__61", 33);
		TraceIn("T__61", 33);
		try
		{
			int _type = T__61;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:39:7: ( 'in' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:39:9: 'in'
			{
			DebugLocation(39, 9);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__61", 33);
			LeaveRule("T__61", 33);
			LeaveRule_T__61();
		}
	}
	// $ANTLR end "T__61"

	partial void EnterRule_T__62();
	partial void LeaveRule_T__62();

	// $ANTLR start "T__62"
	[GrammarRule("T__62")]
	private void mT__62()
	{
		EnterRule_T__62();
		EnterRule("T__62", 34);
		TraceIn("T__62", 34);
		try
		{
			int _type = T__62;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:40:7: ( 'of' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:40:9: 'of'
			{
			DebugLocation(40, 9);
			Match("of"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__62", 34);
			LeaveRule("T__62", 34);
			LeaveRule_T__62();
		}
	}
	// $ANTLR end "T__62"

	partial void EnterRule_T__63();
	partial void LeaveRule_T__63();

	// $ANTLR start "T__63"
	[GrammarRule("T__63")]
	private void mT__63()
	{
		EnterRule_T__63();
		EnterRule("T__63", 35);
		TraceIn("T__63", 35);
		try
		{
			int _type = T__63;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:41:7: ( 'then' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:41:9: 'then'
			{
			DebugLocation(41, 9);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__63", 35);
			LeaveRule("T__63", 35);
			LeaveRule_T__63();
		}
	}
	// $ANTLR end "T__63"

	partial void EnterRule_T__64();
	partial void LeaveRule_T__64();

	// $ANTLR start "T__64"
	[GrammarRule("T__64")]
	private void mT__64()
	{
		EnterRule_T__64();
		EnterRule("T__64", 36);
		TraceIn("T__64", 36);
		try
		{
			int _type = T__64;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:42:7: ( 'to' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:42:9: 'to'
			{
			DebugLocation(42, 9);
			Match("to"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__64", 36);
			LeaveRule("T__64", 36);
			LeaveRule_T__64();
		}
	}
	// $ANTLR end "T__64"

	partial void EnterRule_T__65();
	partial void LeaveRule_T__65();

	// $ANTLR start "T__65"
	[GrammarRule("T__65")]
	private void mT__65()
	{
		EnterRule_T__65();
		EnterRule("T__65", 37);
		TraceIn("T__65", 37);
		try
		{
			int _type = T__65;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:43:7: ( 'type' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:43:9: 'type'
			{
			DebugLocation(43, 9);
			Match("type"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__65", 37);
			LeaveRule("T__65", 37);
			LeaveRule_T__65();
		}
	}
	// $ANTLR end "T__65"

	partial void EnterRule_T__66();
	partial void LeaveRule_T__66();

	// $ANTLR start "T__66"
	[GrammarRule("T__66")]
	private void mT__66()
	{
		EnterRule_T__66();
		EnterRule("T__66", 38);
		TraceIn("T__66", 38);
		try
		{
			int _type = T__66;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:44:7: ( 'var' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:44:9: 'var'
			{
			DebugLocation(44, 9);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__66", 38);
			LeaveRule("T__66", 38);
			LeaveRule_T__66();
		}
	}
	// $ANTLR end "T__66"

	partial void EnterRule_T__67();
	partial void LeaveRule_T__67();

	// $ANTLR start "T__67"
	[GrammarRule("T__67")]
	private void mT__67()
	{
		EnterRule_T__67();
		EnterRule("T__67", 39);
		TraceIn("T__67", 39);
		try
		{
			int _type = T__67;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:45:7: ( '{' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:45:9: '{'
			{
			DebugLocation(45, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__67", 39);
			LeaveRule("T__67", 39);
			LeaveRule_T__67();
		}
	}
	// $ANTLR end "T__67"

	partial void EnterRule_T__68();
	partial void LeaveRule_T__68();

	// $ANTLR start "T__68"
	[GrammarRule("T__68")]
	private void mT__68()
	{
		EnterRule_T__68();
		EnterRule("T__68", 40);
		TraceIn("T__68", 40);
		try
		{
			int _type = T__68;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:46:7: ( '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:46:9: '}'
			{
			DebugLocation(46, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__68", 40);
			LeaveRule("T__68", 40);
			LeaveRule_T__68();
		}
	}
	// $ANTLR end "T__68"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 41);
		TraceIn("ID", 41);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:60:5: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:60:7: ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(60, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(60, 27);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:60:27: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:
					{
					DebugLocation(60, 27);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 41);
			LeaveRule("ID", 41);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 42);
		TraceIn("INT", 42);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:66:5: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:66:7: ( '0' .. '9' )+
			{
			DebugLocation(66, 7);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:66:7: ( '0' .. '9' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:
					{
					DebugLocation(66, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 42);
			LeaveRule("INT", 42);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 43);
		TraceIn("WS", 43);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:69:5: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:69:9: ( ' ' | '\\t' | '\\n' | '\\r' )+
			{
			DebugLocation(69, 9);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:69:9: ( ' ' | '\\t' | '\\n' | '\\r' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='\t' && LA3_0<='\n')||LA3_0=='\r'||LA3_0==' '))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:
					{
					DebugLocation(69, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(73, 12);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 43);
			LeaveRule("WS", 43);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 44);
		TraceIn("COMMENT", 44);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:78:5: ( '/*' ( options {greedy=false; } : COMMENT | . )* '*/' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:78:9: '/*' ( options {greedy=false; } : COMMENT | . )* '*/'
			{
			DebugLocation(78, 9);
			Match("/*"); 

			DebugLocation(78, 14);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:78:14: ( options {greedy=false; } : COMMENT | . )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=3;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0=='*'))
				{
					int LA4_1 = input.LA(2);

					if ((LA4_1=='/'))
					{
						alt4 = 3;
					}
					else if (((LA4_1>='\u0000' && LA4_1<='.')||(LA4_1>='0' && LA4_1<='\uFFFF')))
					{
						alt4 = 2;
					}


				}
				else if ((LA4_0=='/'))
				{
					int LA4_2 = input.LA(2);

					if ((LA4_2=='*'))
					{
						alt4 = 1;
					}
					else if (((LA4_2>='\u0000' && LA4_2<=')')||(LA4_2>='+' && LA4_2<='\uFFFF')))
					{
						alt4 = 2;
					}


				}
				else if (((LA4_0>='\u0000' && LA4_0<=')')||(LA4_0>='+' && LA4_0<='.')||(LA4_0>='0' && LA4_0<='\uFFFF')))
				{
					alt4 = 2;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:78:41: COMMENT
					{
					DebugLocation(78, 41);
					mCOMMENT(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:78:49: .
					{
					DebugLocation(78, 49);
					MatchAny(); 

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(78, 54);
			Match("*/"); 

			DebugLocation(78, 59);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 44);
			LeaveRule("COMMENT", 44);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 45);
		TraceIn("STRING", 45);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:82:5: ( '\"' ( ESC_SEQ | PRINTABLE_CHARACTER )* '\"' )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:82:7: '\"' ( ESC_SEQ | PRINTABLE_CHARACTER )* '\"'
			{
			DebugLocation(82, 7);
			Match('\"'); 
			DebugLocation(82, 10);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:82:10: ( ESC_SEQ | PRINTABLE_CHARACTER )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=3;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0=='\\'))
				{
					alt5 = 1;
				}
				else if (((LA5_0>=' ' && LA5_0<='!')||(LA5_0>='#' && LA5_0<='[')||(LA5_0>=']' && LA5_0<='~')))
				{
					alt5 = 2;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:82:12: ESC_SEQ
					{
					DebugLocation(82, 12);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:82:22: PRINTABLE_CHARACTER
					{
					DebugLocation(82, 22);
					mPRINTABLE_CHARACTER(); 

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(82, 45);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 45);
			LeaveRule("STRING", 45);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 46);
		TraceIn("ESC_SEQ", 46);
		try
		{
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:88:5: ( '\\\\' ( 'n' | 'r' | 't' | '\\\"' | ASCII_ESC | ( WS )? '\\\\' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:88:9: '\\\\' ( 'n' | 'r' | 't' | '\\\"' | ASCII_ESC | ( WS )? '\\\\' )
			{
			DebugLocation(88, 9);
			Match('\\'); 
			DebugLocation(88, 14);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:88:14: ( 'n' | 'r' | 't' | '\\\"' | ASCII_ESC | ( WS )? '\\\\' )
			int alt7=6;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case 'n':
				{
				alt7 = 1;
				}
				break;
			case 'r':
				{
				alt7 = 2;
				}
				break;
			case 't':
				{
				alt7 = 3;
				}
				break;
			case '\"':
				{
				alt7 = 4;
				}
				break;
			case '0':
			case '1':
				{
				alt7 = 5;
				}
				break;
			case '\t':
			case '\n':
			case '\r':
			case ' ':
			case '\\':
				{
				alt7 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:88:15: 'n'
				{
				DebugLocation(88, 15);
				Match('n'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:88:19: 'r'
				{
				DebugLocation(88, 19);
				Match('r'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:88:23: 't'
				{
				DebugLocation(88, 23);
				Match('t'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:88:27: '\\\"'
				{
				DebugLocation(88, 27);
				Match('\"'); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:88:32: ASCII_ESC
				{
				DebugLocation(88, 32);
				mASCII_ESC(); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:88:42: ( WS )? '\\\\'
				{
				DebugLocation(88, 42);
				// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:88:42: ( WS )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>='\t' && LA6_0<='\n')||LA6_0=='\r'||LA6_0==' '))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:88:42: WS
					{
					DebugLocation(88, 42);
					mWS(); 

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(88, 45);
				Match('\\'); 

				}
				break;

			}
			} finally { DebugExitSubRule(7); }


			}

		}
		finally
		{
			TraceOut("ESC_SEQ", 46);
			LeaveRule("ESC_SEQ", 46);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_PRINTABLE_CHARACTER();
	partial void LeaveRule_PRINTABLE_CHARACTER();

	// $ANTLR start "PRINTABLE_CHARACTER"
	[GrammarRule("PRINTABLE_CHARACTER")]
	private void mPRINTABLE_CHARACTER()
	{
		EnterRule_PRINTABLE_CHARACTER();
		EnterRule("PRINTABLE_CHARACTER", 47);
		TraceIn("PRINTABLE_CHARACTER", 47);
		try
		{
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:92:21: ( ( ( ' ' .. '!' ) | ( '#' .. '[' ) | ( ']' .. '~' ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:
			{
			DebugLocation(92, 21);
			if ((input.LA(1)>=' ' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='~'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("PRINTABLE_CHARACTER", 47);
			LeaveRule("PRINTABLE_CHARACTER", 47);
			LeaveRule_PRINTABLE_CHARACTER();
		}
	}
	// $ANTLR end "PRINTABLE_CHARACTER"

	partial void EnterRule_ASCII_ESC();
	partial void LeaveRule_ASCII_ESC();

	// $ANTLR start "ASCII_ESC"
	[GrammarRule("ASCII_ESC")]
	private void mASCII_ESC()
	{
		EnterRule_ASCII_ESC();
		EnterRule("ASCII_ESC", 48);
		TraceIn("ASCII_ESC", 48);
		try
		{
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:96:5: ( '1' ( ( '2' ( '0' .. '7' ) ) | ( ( '0' | '1' ) ( '0' .. '9' ) ) ) | '0' ( '0' .. '9' ) ( '0' .. '9' ) )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0=='1'))
			{
				alt9 = 1;
			}
			else if ((LA9_0=='0'))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:96:9: '1' ( ( '2' ( '0' .. '7' ) ) | ( ( '0' | '1' ) ( '0' .. '9' ) ) )
				{
				DebugLocation(96, 9);
				Match('1'); 
				DebugLocation(96, 13);
				// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:96:13: ( ( '2' ( '0' .. '7' ) ) | ( ( '0' | '1' ) ( '0' .. '9' ) ) )
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0=='2'))
				{
					alt8 = 1;
				}
				else if (((LA8_0>='0' && LA8_0<='1')))
				{
					alt8 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:96:14: ( '2' ( '0' .. '7' ) )
					{
					DebugLocation(96, 14);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:96:14: ( '2' ( '0' .. '7' ) )
					DebugEnterAlt(1);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:96:15: '2' ( '0' .. '7' )
					{
					DebugLocation(96, 15);
					Match('2'); 
					DebugLocation(96, 19);
					input.Consume();


					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:96:33: ( ( '0' | '1' ) ( '0' .. '9' ) )
					{
					DebugLocation(96, 33);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:96:33: ( ( '0' | '1' ) ( '0' .. '9' ) )
					DebugEnterAlt(1);
					// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:96:34: ( '0' | '1' ) ( '0' .. '9' )
					{
					DebugLocation(96, 34);
					input.Consume();

					DebugLocation(96, 44);
					input.Consume();


					}


					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:97:9: '0' ( '0' .. '9' ) ( '0' .. '9' )
				{
				DebugLocation(97, 9);
				Match('0'); 
				DebugLocation(97, 13);
				input.Consume();

				DebugLocation(97, 24);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("ASCII_ESC", 48);
			LeaveRule("ASCII_ESC", 48);
			LeaveRule_ASCII_ESC();
		}
	}
	// $ANTLR end "ASCII_ESC"

	public override void mTokens()
	{
		// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:8: ( AND | ASSIGN | BREAK | DIV | EQUAL | FOR | GT | GT_EQUAL | LET | LT | LT_EQUAL | MINUS | MUL | NIL | NON_EQUAL | OR | PLUS | WHILE | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | ID | INT | WS | COMMENT | STRING )
		int alt10=45;
		try { DebugEnterDecision(10, false);
		try
		{
			alt10 = dfa10.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(10); }
		switch (alt10)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:10: AND
			{
			DebugLocation(1, 10);
			mAND(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:14: ASSIGN
			{
			DebugLocation(1, 14);
			mASSIGN(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:21: BREAK
			{
			DebugLocation(1, 21);
			mBREAK(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:27: DIV
			{
			DebugLocation(1, 27);
			mDIV(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:31: EQUAL
			{
			DebugLocation(1, 31);
			mEQUAL(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:37: FOR
			{
			DebugLocation(1, 37);
			mFOR(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:41: GT
			{
			DebugLocation(1, 41);
			mGT(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:44: GT_EQUAL
			{
			DebugLocation(1, 44);
			mGT_EQUAL(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:53: LET
			{
			DebugLocation(1, 53);
			mLET(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:57: LT
			{
			DebugLocation(1, 57);
			mLT(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:60: LT_EQUAL
			{
			DebugLocation(1, 60);
			mLT_EQUAL(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:69: MINUS
			{
			DebugLocation(1, 69);
			mMINUS(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:75: MUL
			{
			DebugLocation(1, 75);
			mMUL(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:79: NIL
			{
			DebugLocation(1, 79);
			mNIL(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:83: NON_EQUAL
			{
			DebugLocation(1, 83);
			mNON_EQUAL(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:93: OR
			{
			DebugLocation(1, 93);
			mOR(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:96: PLUS
			{
			DebugLocation(1, 96);
			mPLUS(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:101: WHILE
			{
			DebugLocation(1, 101);
			mWHILE(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:107: T__47
			{
			DebugLocation(1, 107);
			mT__47(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:113: T__48
			{
			DebugLocation(1, 113);
			mT__48(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:119: T__49
			{
			DebugLocation(1, 119);
			mT__49(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:125: T__50
			{
			DebugLocation(1, 125);
			mT__50(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:131: T__51
			{
			DebugLocation(1, 131);
			mT__51(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:137: T__52
			{
			DebugLocation(1, 137);
			mT__52(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:143: T__53
			{
			DebugLocation(1, 143);
			mT__53(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:149: T__54
			{
			DebugLocation(1, 149);
			mT__54(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:155: T__55
			{
			DebugLocation(1, 155);
			mT__55(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:161: T__56
			{
			DebugLocation(1, 161);
			mT__56(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:167: T__57
			{
			DebugLocation(1, 167);
			mT__57(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:173: T__58
			{
			DebugLocation(1, 173);
			mT__58(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:179: T__59
			{
			DebugLocation(1, 179);
			mT__59(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:185: T__60
			{
			DebugLocation(1, 185);
			mT__60(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:191: T__61
			{
			DebugLocation(1, 191);
			mT__61(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:197: T__62
			{
			DebugLocation(1, 197);
			mT__62(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:203: T__63
			{
			DebugLocation(1, 203);
			mT__63(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:209: T__64
			{
			DebugLocation(1, 209);
			mT__64(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:215: T__65
			{
			DebugLocation(1, 215);
			mT__65(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:221: T__66
			{
			DebugLocation(1, 221);
			mT__66(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:227: T__67
			{
			DebugLocation(1, 227);
			mT__67(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:233: T__68
			{
			DebugLocation(1, 233);
			mT__68(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:239: ID
			{
			DebugLocation(1, 239);
			mID(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:242: INT
			{
			DebugLocation(1, 242);
			mINT(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:246: WS
			{
			DebugLocation(1, 246);
			mWS(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:249: COMMENT
			{
			DebugLocation(1, 249);
			mCOMMENT(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// C:\\Users\\Frank\\Desktop\\Compilación\\TigerCompiler\\Tiger.g:1:257: STRING
			{
			DebugLocation(1, 257);
			mSTRING(); 

			}
			break;

		}

	}


	#region DFA
	DFA10 dfa10;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa10 = new DFA10(this);
	}

	private class DFA10 : DFA
	{
		private const string DFA10_eotS =
			"\x2\xFFFF\x1\x25\x1\x20\x1\x28\x1\xFFFF\x1\x20\x1\x2C\x1\x20\x1\x30\x2"+
			"\xFFFF\x1\x20\x2\xFFFF\x1\x20\x7\xFFFF\x7\x20\x8\xFFFF\x1\x20\x2\xFFFF"+
			"\x2\x20\x2\xFFFF\x1\x20\x3\xFFFF\x3\x20\x1\x45\x2\x20\x1\x48\x1\x49\x1"+
			"\x4A\x1\x20\x1\x4C\x3\x20\x1\x50\x1\x20\x1\x52\x1\x53\x2\x20\x1\xFFFF"+
			"\x1\x20\x1\x57\x3\xFFFF\x1\x20\x1\xFFFF\x1\x20\x1\x5A\x1\x20\x1\xFFFF"+
			"\x1\x20\x2\xFFFF\x2\x20\x1\x5F\x1\xFFFF\x1\x60\x1\x61\x1\xFFFF\x1\x62"+
			"\x1\x20\x1\x64\x1\x65\x4\xFFFF\x1\x20\x2\xFFFF\x1\x20\x1\x68\x1\xFFFF";
		private const string DFA10_eofS =
			"\x69\xFFFF";
		private const string DFA10_minS =
			"\x1\x9\x1\xFFFF\x1\x3D\x1\x72\x1\x2A\x1\xFFFF\x1\x6F\x1\x3D\x1\x65\x1"+
			"\x3D\x2\xFFFF\x1\x69\x2\xFFFF\x1\x68\x7\xFFFF\x1\x72\x1\x6F\x1\x6C\x2"+
			"\x66\x1\x68\x1\x61\x8\xFFFF\x1\x65\x2\xFFFF\x1\x72\x1\x6E\x2\xFFFF\x1"+
			"\x74\x3\xFFFF\x1\x6C\x1\x69\x1\x72\x1\x30\x1\x73\x1\x64\x3\x30\x1\x65"+
			"\x1\x30\x1\x70\x1\x72\x1\x61\x1\x30\x1\x63\x2\x30\x1\x6C\x1\x61\x1\xFFFF"+
			"\x1\x65\x1\x30\x3\xFFFF\x1\x6E\x1\xFFFF\x1\x65\x1\x30\x1\x6B\x1\xFFFF"+
			"\x1\x74\x2\xFFFF\x1\x65\x1\x79\x1\x30\x1\xFFFF\x2\x30\x1\xFFFF\x1\x30"+
			"\x1\x69\x2\x30\x4\xFFFF\x1\x6F\x2\xFFFF\x1\x6E\x1\x30\x1\xFFFF";
		private const string DFA10_maxS =
			"\x1\x7D\x1\xFFFF\x1\x3D\x1\x72\x1\x2A\x1\xFFFF\x1\x75\x1\x3D\x1\x65\x1"+
			"\x3E\x2\xFFFF\x1\x69\x2\xFFFF\x1\x68\x7\xFFFF\x1\x72\x1\x6F\x2\x6E\x1"+
			"\x66\x1\x79\x1\x61\x8\xFFFF\x1\x65\x2\xFFFF\x1\x72\x1\x6E\x2\xFFFF\x1"+
			"\x74\x3\xFFFF\x1\x6C\x1\x69\x1\x72\x1\x7A\x1\x73\x1\x64\x3\x7A\x1\x65"+
			"\x1\x7A\x1\x70\x1\x72\x1\x61\x1\x7A\x1\x63\x2\x7A\x1\x6C\x1\x61\x1\xFFFF"+
			"\x1\x65\x1\x7A\x3\xFFFF\x1\x6E\x1\xFFFF\x1\x65\x1\x7A\x1\x6B\x1\xFFFF"+
			"\x1\x74\x2\xFFFF\x1\x65\x1\x79\x1\x7A\x1\xFFFF\x2\x7A\x1\xFFFF\x1\x7A"+
			"\x1\x69\x2\x7A\x4\xFFFF\x1\x6F\x2\xFFFF\x1\x6E\x1\x7A\x1\xFFFF";
		private const string DFA10_acceptS =
			"\x1\xFFFF\x1\x1\x3\xFFFF\x1\x5\x4\xFFFF\x1\xC\x1\xD\x1\xFFFF\x1\x10\x1"+
			"\x11\x1\xFFFF\x1\x13\x1\x14\x1\x15\x1\x16\x1\x18\x1\x19\x1\x1A\x7\xFFFF"+
			"\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2D\x1\x2\x1\x17\x1\xFFFF\x1\x2C"+
			"\x1\x4\x2\xFFFF\x1\x8\x1\x7\x1\xFFFF\x1\xB\x1\xF\x1\xA\x14\xFFFF\x1\x1C"+
			"\x2\xFFFF\x1\x20\x1\x21\x1\x22\x1\xFFFF\x1\x24\x3\xFFFF\x1\x6\x1\xFFFF"+
			"\x1\x9\x1\xE\x3\xFFFF\x1\x1E\x2\xFFFF\x1\x26\x4\xFFFF\x1\x1D\x1\x23\x1"+
			"\x25\x1\x3\x1\xFFFF\x1\x12\x1\x1B\x2\xFFFF\x1\x1F";
		private const string DFA10_specialS =
			"\x69\xFFFF}>";
		private static readonly string[] DFA10_transitionS =
			{
				"\x2\x22\x2\xFFFF\x1\x22\x12\xFFFF\x1\x22\x1\xFFFF\x1\x23\x3\xFFFF\x1"+
				"\x1\x1\xFFFF\x1\x10\x1\x11\x1\xB\x1\xE\x1\x12\x1\xA\x1\x13\x1\x4\xA"+
				"\x21\x1\x2\x1\x14\x1\x9\x1\x5\x1\x7\x2\xFFFF\x1A\x20\x1\x15\x1\xFFFF"+
				"\x1\x16\x3\xFFFF\x1\x17\x1\x3\x1\x20\x1\x18\x1\x19\x1\x6\x2\x20\x1\x1A"+
				"\x2\x20\x1\x8\x1\x20\x1\xC\x1\x1B\x4\x20\x1\x1C\x1\x20\x1\x1D\x1\xF"+
				"\x3\x20\x1\x1E\x1\xD\x1\x1F",
				"",
				"\x1\x24",
				"\x1\x26",
				"\x1\x27",
				"",
				"\x1\x29\x5\xFFFF\x1\x2A",
				"\x1\x2B",
				"\x1\x2D",
				"\x1\x2E\x1\x2F",
				"",
				"",
				"\x1\x31",
				"",
				"",
				"\x1\x32",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x33",
				"\x1\x34",
				"\x1\x35\x1\xFFFF\x1\x36",
				"\x1\x37\x7\xFFFF\x1\x38",
				"\x1\x39",
				"\x1\x3A\x6\xFFFF\x1\x3B\x9\xFFFF\x1\x3C",
				"\x1\x3D",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3E",
				"",
				"",
				"\x1\x3F",
				"\x1\x40",
				"",
				"",
				"\x1\x41",
				"",
				"",
				"",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x46",
				"\x1\x47",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x4B",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x4D",
				"\x1\x4E",
				"\x1\x4F",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x51",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x54",
				"\x1\x55",
				"",
				"\x1\x56",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"",
				"",
				"\x1\x58",
				"",
				"\x1\x59",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x5B",
				"",
				"\x1\x5C",
				"",
				"",
				"\x1\x5D",
				"\x1\x5E",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x63",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"",
				"",
				"",
				"\x1\x66",
				"",
				"",
				"\x1\x67",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				""
			};

		private static readonly short[] DFA10_eot = DFA.UnpackEncodedString(DFA10_eotS);
		private static readonly short[] DFA10_eof = DFA.UnpackEncodedString(DFA10_eofS);
		private static readonly char[] DFA10_min = DFA.UnpackEncodedStringToUnsignedChars(DFA10_minS);
		private static readonly char[] DFA10_max = DFA.UnpackEncodedStringToUnsignedChars(DFA10_maxS);
		private static readonly short[] DFA10_accept = DFA.UnpackEncodedString(DFA10_acceptS);
		private static readonly short[] DFA10_special = DFA.UnpackEncodedString(DFA10_specialS);
		private static readonly short[][] DFA10_transition;

		static DFA10()
		{
			int numStates = DFA10_transitionS.Length;
			DFA10_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA10_transition[i] = DFA.UnpackEncodedString(DFA10_transitionS[i]);
			}
		}

		public DFA10( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( AND | ASSIGN | BREAK | DIV | EQUAL | FOR | GT | GT_EQUAL | LET | LT | LT_EQUAL | MINUS | MUL | NIL | NON_EQUAL | OR | PLUS | WHILE | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | ID | INT | WS | COMMENT | STRING );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

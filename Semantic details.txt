------------
Procedure calls, assignments, if-then, while, break, and sometimes if-then-else produce no value and may not appear where a value is expected.
------------
type-id [ expr ] of expr (Ambas expr son int)
------------
+-/* use int and return int.
------------
The binary operators >, <, >=, and <= compare their operands, which may be either both integer or both string and produce an int.
------------
The binary operators = and <> can compare any two operands
of the same (non-valueless) type and return either integer 0 or 1.
------------
Static scoping.
------------
The if-then-else expression, written if expr then expr else expr evaluates the first expression, which must return an integer.
the second and third expressions must be of the same type or both not return a value.
The if-then expression does not return a value.
------------
The while-do expression, while expr do expr evaluates its first expression, which must return an integer. If it is non-zero, the second expression is evaluated, which must not return a value.
------------
The for expression, for id := expr to expr do expr, evaluates the first and second expressions
the third expression is evaluated with the integer variable named by id bound to the loop index. The scope of this variable is limited to the third expression, and may not be assigned to. *******This expression may not produce a result*******
------------
The break expression terminates the innermost enclosing while or for expression that is enclosed in the same function/procedure. The break is illegal outside this.
------------
In lets, the result is that of the last expression, or nothing if there are none.
------------
*A sequence of type declarations (i.e., with no intervening variable or function declarations) may be mutually recursive. No
two defined types in such a sequence may have the same name. Each recursion cycle must pass through a record or array type.
**Type names have their own name space.**
------------
*A sequence of function declarations (i.e., with no intervening variable or type declarations) may be mutually recursive. No two functions in such a sequence may have the same name. The scope of the function ends at the end.
------------
*the scope of the variable declaration begins just after the declaration. A variable lasts throughout its scope.
------------
*The expression nil represents a value that can be assigned to any record (*array or string*) type. Accessing a field from a nil-valued record is a runtime error. Nil must be used in a context were its actual record type can be determined, 
------------
In variable declarations, if the type is not specified, the variable’s type comes from the expression.
///////////
Indexing and member resolution.
Keep Scopes.
Semantic Check for record creation.

Variables hide variables, and functions hide functions not on the same block. But... Can a variable hide a function with the same name?



